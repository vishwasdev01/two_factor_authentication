continue
otp_enabled
@user.otp_enabled
@user
@user.update(enable_2fa: false)
n
continue
@user
n
continue
@user.enable_2fa
continue
n
continue
n
!@user.verified
continue
@user.enable_2fa
@user.verified
@user.verfied
@user
@user && @user.authenticate(session_params[:password])
n
continue
n
@user
continue
params
continue
params
continue
request.referer
n
user
n
continue
User.find_by(email: "fvgwefve")
User.find_by(email: params[:email])
User.find(params[:email])
params[:email]
params
continue
flash[:error]
continue
flash[:error]
continue
n
continue
n
flash[:error]
continue
flash[:error]
n
params[:otp]
session[:otp]
continue
User.find(params[:format]).otp
User.find(params[:format])
User.find(params[:format]
params
continue
n
continue
params
continue
params
continue
*args
args
method
n
qr_path
continue
c
n
session
c
session
c
@user.otp_code
c
 @user.otp_code
n
c
@user.otp_code
@user.authenticate_otp(otp_code)
otp_code
n
c
@user
n
@user
c
current_user
@user
c
User.find_by(id: params[:id])
params
@user
c
@user && @user.authenticate(session_params[:password])
@user
@use
n
session_params
c
session_params
c
session_params
params
@user
n
c
 @user.save!
n
c
@user.save!
n
c
 @user.save!
n
user_params
c
user_params
user_param
c
continue
c
params
params[:email]
User.find_by(email: params[:email])
@user
@user && @user.authenticate(params[:password])
n
nextn
continue
params
continue
response.body
continue
self
continue
self
@user
c
user_params
c
params
user_params
c
user
c
token
c
token
c
@token
n
c
n
@token
n
JsonWebToken.encode(user: user.id)
user.id
user
c
@user
id
c
id
c
JsonWebToken.decode(token)
id
n
JWT.decode(token, JWT_SECRET)[0].first.last
c
id
token
c
JWT.decode(token, JWT_SECRET)[0].first.last
JWT.decode(token, JWT_SECRET)[0].first
JWT.decode(token, JWT_SECRET)[0]
c
 JsonWebToken.decode(token).first.last
 JsonWebToken.decode(token).key(user)
 JsonWebToken.decode(token).first.last
 JsonWebToken.decode(token).first
 JsonWebToken.decode(token).user
 JsonWebToken.decode(token)
c
body.first.last
body.first
body[:exp]
body[:user]
body
JSON.parse(body["user"])
 body["user"] = JSON.parse(body["user"]) if body.key?("user")
n
c
token
JsonWebToken.decode(token)
c
n
c
eval(JsonWebToken.decode(token))c
eval(JsonWebToken.decode(token))
JsonWebToken.decode(token)
c
eval(JsonWebToken.decode(token))
JsonWebToken.decode(token).key(user)
JsonWebToken.decode(token)
JsonWebToken.decode(token).user
JsonWebToken.decode(token)
JsonWebToken.decode(token).first
JsonWebToken.decode(token)[1]
JsonWebToken.decode(token)[0]
JsonWebToken.decode(token).user
JsonWebToken.decode(token)
c
request.headers[:token]
request.headers
request.header
request
params[:header]
params
token
c
token
n
c
JsonWebToken.decode(token)
JsonWebToken.decode
c
 JsonWebToken.encode(user_id: @user.id)
c
generate_otp
generate_opt
c
self.generate_otp
generate_otp
User.generate_otp
User
self
@user
n
c
@user.authenticate('123456')
@user.authenticate(password: '123456')
@user.authenticate!(password: '123456')
@user.authenticate(password: '123456')
@user = User.first
c
 @user
 @user.save!
 @user.save
 @user.password
